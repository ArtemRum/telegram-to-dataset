import os
import json
from datetime import datetime

def process_telegram_exports():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ Telegram —ç–∫—Å–ø–æ—Ä—Ç–æ–≤"""
    
    # –§–∞–π–ª—ã –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    known_people_file = "known_people.txt"
    training_dialogs_file = "training_dialogs.txt"
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if not os.path.exists(known_people_file):
        open(known_people_file, 'w', encoding='utf-8').close()
    
    if not os.path.exists(training_dialogs_file):
        open(training_dialogs_file, 'w', encoding='utf-8').close()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —É–∂–µ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ª—é–¥–µ–π (–∫—Ä–æ–º–µ –ê—Ä—Ç—ë–º–∞)
    known_people = set()
    if os.path.exists(known_people_file):
        with open(known_people_file, 'r', encoding='utf-8') as f:
            for line in f:
                person = line.strip()
                if person and person != "–ê—Ä—Ç—ë–º":
                    known_people.add(person)
    
    # –ò—â–µ–º –≤—Å–µ –ø–∞–ø–∫–∏ –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    folders_processed = 0
    total_messages = 0
    
    for item in os.listdir('.'):
        if os.path.isdir(item):
            result_json_path = os.path.join(item, "result.json")
            
            if os.path.exists(result_json_path):
                try:
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª
                    messages_found = process_json_file(
                        result_json_path, 
                        known_people, 
                        training_dialogs_file
                    )
                    total_messages += messages_found
                    folders_processed += 1
                    print(f"‚úì –û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –ø–∞–ø–∫–∞: {item} ({messages_found} —Å–æ–æ–±—â–µ–Ω–∏–π)")
                    
                except Exception as e:
                    print(f"‚úó –û—à–∏–±–∫–∞ –≤ –ø–∞–ø–∫–µ {item}: {e}")
            else:
                print(f"‚úó –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª {result_json_path}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ª—é–¥–µ–π
    save_known_people(known_people, known_people_file)
    
    print(f"\nüìä –ò—Ç–æ–≥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
    print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–∞–ø–æ–∫: {folders_processed}")
    print(f"   –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}")
    print(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞–≤—Ç–æ—Ä–æ–≤: {len(known_people)}")
    print(f"   –§–∞–π–ª known_people.txt –æ–±–Ω–æ–≤–ª–µ–Ω")
    print(f"   –§–∞–π–ª training_dialogs.txt –¥–æ–ø–æ–ª–Ω–µ–Ω")

def process_json_file(file_path, known_people, output_file):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω JSON —Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    with open(file_path, 'r', encoding='utf-8') as f:
        data = json.load(f)
    
    messages_processed = 0
    
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –¥–æ–∑–∞–ø–∏—Å–∏
    with open(output_file, 'a', encoding='utf-8') as dialogs_file:
        
        for message in data.get('messages', []):
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            text = extract_message_text(message.get('text', ''))
            if not text or len(text.strip()) < 2:
                continue
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∞
            author = extract_author(message)
            if not author:
                continue
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ—Ä–∞ –≤ known_people (–∫—Ä–æ–º–µ –ê—Ä—Ç—ë–º–∞)
            if author != "–ê—Ä—Ç—ë–º" and author not in known_people:
                known_people.add(author)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
            time_str = format_message_time(message.get('date', ''))
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è training_dialogs.txt
            formatted_message = f"({time_str}) [{author}] {text}"
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
            dialogs_file.write(formatted_message + '\n')
            messages_processed += 1
    
    return messages_processed

def extract_message_text(text_data):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ Telegram"""
    
    if isinstance(text_data, str):
        return text_data.strip()
    
    elif isinstance(text_data, list):
        text_parts = []
        for part in text_data:
            if isinstance(part, str):
                text_parts.append(part)
            elif isinstance(part, dict):
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                if 'text' in part:
                    text_parts.append(part['text'])
                elif 'type' in part and part['type'] == 'link':
                    text_parts.append(part.get('text', part.get('href', '')))
        return ' '.join(text_parts).strip()
    
    return ""

def extract_author(message):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–º—è –∞–≤—Ç–æ—Ä–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    
    author = message.get('from', '')
    
    # –ï—Å–ª–∏ –∞–≤—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –ø–æ–ª—è
    if not author:
        author = message.get('from_id', '')
        author = message.get('actor', author)
        author = message.get('actor_id', author)
    
    # –û—á–∏—â–∞–µ–º –∏–º—è –∞–≤—Ç–æ—Ä–∞
    if isinstance(author, str):
        author = author.strip()
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å—ã —Ç–∏–ø–∞ "channel#", "user#"
        if '#' in author:
            author = author.split('#')[-1]
    
    return author if author else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

def format_message_time(date_str):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"""
    
    if not date_str:
        return "00:00"
    
    try:
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç –∏–∑ Telegram
        if 'T' in date_str:
            if 'Z' in date_str:
                dt = datetime.fromisoformat(date_str.replace('Z', '+00:00'))
            else:
                dt = datetime.fromisoformat(date_str)
        else:
            # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
            dt = datetime.strptime(date_str, '%Y-%m-%dT%H:%M:%S')
        
        return dt.strftime("%H:%M")
        
    except (ValueError, AttributeError):
        return "00:00"

def save_known_people(known_people, output_file):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ª—é–¥–µ–π –≤ —Ñ–∞–π–ª"""
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ (–∫—Ä–æ–º–µ "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    sorted_people = sorted([p for p in known_people if p != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"])
    
    # "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü –µ—Å–ª–∏ –µ—Å—Ç—å
    if "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" in known_people:
        sorted_people.append("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    
    with open(output_file, 'w', encoding='utf-8') as f:
        for person in sorted_people:
            f.write(person + '\n')

def show_statistics():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º"""
    
    if os.path.exists("known_people.txt"):
        with open("known_people.txt", 'r', encoding='utf-8') as f:
            people = [line.strip() for line in f if line.strip()]
        print(f"\nüìã –ò–∑–≤–µ—Å—Ç–Ω—ã–µ –∞–≤—Ç–æ—Ä—ã ({len(people)}):")
        for person in people[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            print(f"   ‚Ä¢ {person}")
        if len(people) > 10:
            print(f"   ... –∏ –µ—â–µ {len(people) - 10}")
    
    if os.path.exists("training_dialogs.txt"):
        with open("training_dialogs.txt", 'r', encoding='utf-8') as f:
            lines = f.readlines()
        print(f"\nüìù –°–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±—É—á–µ–Ω–∏—è: {len(lines)}")

if __name__ == "__main__":
    print("üîç –ü–æ–∏—Å–∫ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ Telegram —ç–∫—Å–ø–æ—Ä—Ç–æ–≤...")
    print("   –ò—â—É –ø–∞–ø–∫–∏ —Å —Ñ–∞–π–ª–∞–º–∏ result.json\n")
    
    process_telegram_exports()
    show_statistics()
    
    print("\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
